// <auto-generated />
using System;
using CohorteApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CohorteApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221203194621_UpdatedModels")]
    partial class UpdatedModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CohorteApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Musica"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Familiar"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Deporte"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Seminarios"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cursos y Talleres"
                        });
                });

            modelBuilder.Entity("CohorteApi.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FrontPageImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CohorteApi.Models.Newsletter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Newsletters");
                });

            modelBuilder.Entity("CohorteApi.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("CohorteApi.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("CohorteApi.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateSubscribed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateSubscribed = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test@mailinator.com",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            DateSubscribed = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test2@mailinator.com",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            DateSubscribed = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test3@mailinator.com",
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            DateSubscribed = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test4@mailinator.com",
                            IsActive = true
                        },
                        new
                        {
                            Id = 5,
                            DateSubscribed = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test5@mailinator.com",
                            IsActive = true
                        },
                        new
                        {
                            Id = 6,
                            DateSubscribed = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test6@mailinator.com",
                            IsActive = true
                        },
                        new
                        {
                            Id = 7,
                            DateSubscribed = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test7@mailinator.com",
                            IsActive = true
                        },
                        new
                        {
                            Id = 8,
                            DateSubscribed = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test8@mailinator.com",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e0238212-ada9-40a9-bcf0-587347f6ad9a",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "100e66ac-ecf3-414f-aa2f-c342bedb0331",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "07c2bb53-5e7f-498e-88e7-e6f42e9be447",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4df1368e-39b0-4c55-bc5c-d2bf4b1037d8",
                            Email = "nadir@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NADIR@MAILINATOR.COM",
                            NormalizedUserName = "NADIR",
                            PasswordHash = "AQAAAAEAACcQAAAAEKGnf/vao/BPqyRGaoO/o00AupzpO/1UMjNZTzpQsaeXBFCMg9lO2qxDrMOmddyA4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab7cd2ff-ab4d-4600-b364-1cc6b246615c",
                            TwoFactorEnabled = false,
                            UserName = "nadir"
                        },
                        new
                        {
                            Id = "1483b6b3-a5f0-42f6-b9a7-f3980c5a8dec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03f27db4-e59c-45ad-8250-f60d0793d80c",
                            Email = "alex@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEX@MAILINATOR.COM",
                            NormalizedUserName = "ALEX",
                            PasswordHash = "AQAAAAEAACcQAAAAEHyrkhwIkVGQptGR5yStsnPWZY5G5HqiSQ6npOWm6AQ5e5uOlGYUPrPNDwKmntuNjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82d5c1ba-f8d4-4cd5-a84d-5a0d4aa9f347",
                            TwoFactorEnabled = false,
                            UserName = "alex"
                        },
                        new
                        {
                            Id = "a00492b9-5aa8-422f-83c4-a87108183324",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8af0470-1482-407d-831e-b846fab01288",
                            Email = "diego@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIEGO@MAILINATOR.COM",
                            NormalizedUserName = "DIEGO",
                            PasswordHash = "AQAAAAEAACcQAAAAEKVvA9GtwjdbPs0H9KNZ/znhHVHTBKsHSQtezyQgGH5FbMQCteO8ytbBC5ryzSig8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7a9ed8d-52dc-49fa-8486-e1ecccc7bfe8",
                            TwoFactorEnabled = false,
                            UserName = "diego"
                        },
                        new
                        {
                            Id = "40867f0b-de28-470e-bace-eba0a7be5577",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75a5a5eb-0f9a-4fda-999f-f7d69fb15469",
                            Email = "max@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAX@MAILINATOR.COM",
                            NormalizedUserName = "MAX",
                            PasswordHash = "AQAAAAEAACcQAAAAEBj12kMBxTchb/PoT1LJnXggj0xz7gEi5BsUTM1HxKPl9bZdqjNtEvtvCn/nrL6Agw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d59f18e9-32c0-45ee-ab0e-9586faf44b44",
                            TwoFactorEnabled = false,
                            UserName = "max"
                        },
                        new
                        {
                            Id = "cb0ebf82-fe6d-4638-9b94-353f97239554",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16723d32-06e9-4b34-a2b3-bbbb1710951d",
                            Email = "manuel@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANUEL@MAILINATOR.COM",
                            NormalizedUserName = "MANUEL",
                            PasswordHash = "AQAAAAEAACcQAAAAEFZIcLkxgXOra2gLBE/2KZM8ZgMUGM4kcLVjw9HCbzQSn/uWbj8ykVfRniD29X3gTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ac4fe76-6349-45df-a610-b342a1c84c68",
                            TwoFactorEnabled = false,
                            UserName = "manuel"
                        },
                        new
                        {
                            Id = "bcd0f007-ddf1-4e42-8788-4e1a05403681",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "624bb4c3-877a-4e5a-b9a7-d016d76f912f",
                            Email = "any@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANY@MAILINATOR.COM",
                            NormalizedUserName = "ANY",
                            PasswordHash = "AQAAAAEAACcQAAAAEJHqABcRNvYGpGA3qaahM/2GbEB5rVpyiaa8BmxwwSvYjmA7gtYPvKF8ExbdwGhhPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eda630c8-0037-4f68-8088-768613413403",
                            TwoFactorEnabled = false,
                            UserName = "any"
                        },
                        new
                        {
                            Id = "76c1bcd6-35f6-475b-be0e-d99a6f1327aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e26f274-5855-49d0-9bfc-2552f2095acf",
                            Email = "bel@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BEL@MAILINATOR.COM",
                            NormalizedUserName = "BEL",
                            PasswordHash = "AQAAAAEAACcQAAAAEGPHAFbJcYh0oZRpvDjecVXNYd4aLtt8nQ8e1danX7ud7PVzUiQDlkEyzQ75M/alCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "457b1718-e935-44ae-874e-5cb747871a1d",
                            TwoFactorEnabled = false,
                            UserName = "bel"
                        },
                        new
                        {
                            Id = "213bcaca-8cd3-405a-8961-985b3d71b43b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e657f0ea-51f0-4266-ae14-12e7e7f9c191",
                            Email = "d@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "D@MAILINATOR.COM",
                            NormalizedUserName = "D",
                            PasswordHash = "AQAAAAEAACcQAAAAEL+lEUJEuqjUXGAbTYnlcgifZfrxJqW6iJmqRPyXLKetsz1x+9/BIf7eM+3ghT4U7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4d9f10b-626b-4659-9c0a-fc13650dcae4",
                            TwoFactorEnabled = false,
                            UserName = "d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "07c2bb53-5e7f-498e-88e7-e6f42e9be447",
                            RoleId = "100e66ac-ecf3-414f-aa2f-c342bedb0331"
                        },
                        new
                        {
                            UserId = "1483b6b3-a5f0-42f6-b9a7-f3980c5a8dec",
                            RoleId = "100e66ac-ecf3-414f-aa2f-c342bedb0331"
                        },
                        new
                        {
                            UserId = "a00492b9-5aa8-422f-83c4-a87108183324",
                            RoleId = "100e66ac-ecf3-414f-aa2f-c342bedb0331"
                        },
                        new
                        {
                            UserId = "40867f0b-de28-470e-bace-eba0a7be5577",
                            RoleId = "100e66ac-ecf3-414f-aa2f-c342bedb0331"
                        },
                        new
                        {
                            UserId = "cb0ebf82-fe6d-4638-9b94-353f97239554",
                            RoleId = "100e66ac-ecf3-414f-aa2f-c342bedb0331"
                        },
                        new
                        {
                            UserId = "bcd0f007-ddf1-4e42-8788-4e1a05403681",
                            RoleId = "100e66ac-ecf3-414f-aa2f-c342bedb0331"
                        },
                        new
                        {
                            UserId = "76c1bcd6-35f6-475b-be0e-d99a6f1327aa",
                            RoleId = "100e66ac-ecf3-414f-aa2f-c342bedb0331"
                        },
                        new
                        {
                            UserId = "213bcaca-8cd3-405a-8961-985b3d71b43b",
                            RoleId = "100e66ac-ecf3-414f-aa2f-c342bedb0331"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CohorteApi.Models.Event", b =>
                {
                    b.HasOne("CohorteApi.Models.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CohorteApi.Models.Review", b =>
                {
                    b.HasOne("CohorteApi.Models.Event", "Event")
                        .WithMany("Reviews")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CohorteApi.Models.Section", b =>
                {
                    b.HasOne("CohorteApi.Models.Event", null)
                        .WithMany("Sections")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CohorteApi.Models.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("CohorteApi.Models.Event", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Sections");
                });
#pragma warning restore 612, 618
        }
    }
}
