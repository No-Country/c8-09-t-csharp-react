// <auto-generated />
using System;
using CohorteApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CohorteApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CohorteApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Musica"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Familiar"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Deporte"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Seminarios"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cursos y Talleres"
                        });
                });

            modelBuilder.Entity("CohorteApi.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FrontPageImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CohorteApi.Models.Newsletter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Newsletters");
                });

            modelBuilder.Entity("CohorteApi.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("CohorteApi.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("CohorteApi.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateSubscribed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateSubscribed = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test@mailinator.com",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            DateSubscribed = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test2@mailinator.com",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            DateSubscribed = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test3@mailinator.com",
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            DateSubscribed = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test4@mailinator.com",
                            IsActive = true
                        },
                        new
                        {
                            Id = 5,
                            DateSubscribed = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test5@mailinator.com",
                            IsActive = true
                        },
                        new
                        {
                            Id = 6,
                            DateSubscribed = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test6@mailinator.com",
                            IsActive = true
                        },
                        new
                        {
                            Id = 7,
                            DateSubscribed = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test7@mailinator.com",
                            IsActive = true
                        },
                        new
                        {
                            Id = 8,
                            DateSubscribed = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test8@mailinator.com",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "460cad28-5d69-461f-bc6d-c6ab79efe7ab",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "233efe61-93e9-4428-a60e-e8355c338e8b",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5140f1d9-b80a-4fc4-87a6-86ecd759e191",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50c349d0-79cd-497a-b573-1431b26a0668",
                            Email = "nadir@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NADIR@MAILINATOR.COM",
                            NormalizedUserName = "NADIR",
                            PasswordHash = "AQAAAAEAACcQAAAAEPgskpgXja2jjbcaJpBund8l10jpDdrPOTHxRuEukoPFMqa25ZcfJRsozaguoapE1g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8bf3e57b-f9a7-451e-a835-fd3b020bd91f",
                            TwoFactorEnabled = false,
                            UserName = "nadir"
                        },
                        new
                        {
                            Id = "00fb242a-8289-491c-bc80-dbebc94746fb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6474a095-3747-42fe-bcb1-5ed4e426615f",
                            Email = "alex@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEX@MAILINATOR.COM",
                            NormalizedUserName = "ALEX",
                            PasswordHash = "AQAAAAEAACcQAAAAEDOtvA49oC2Rmyif8D4v8YAH/Zkl1uydNJFO/nPP8/IZdD2Ib7WephvRP+5pQD80zA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f08d5f9b-b4fa-45ac-b31d-81d0104cfe95",
                            TwoFactorEnabled = false,
                            UserName = "alex"
                        },
                        new
                        {
                            Id = "da726c41-2151-49bc-9b41-aa5a6ef32963",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1548814c-333d-4e17-933d-0c632c57e9b6",
                            Email = "diego@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIEGO@MAILINATOR.COM",
                            NormalizedUserName = "DIEGO",
                            PasswordHash = "AQAAAAEAACcQAAAAEN/Bzw/4+Wq4nuqsXWH4EzqizE+G3EXMa1DmZGUrVlMlMW9i86lXOD3DfC/GqvYS7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df138583-e7e8-48db-a59a-bd1a648f200c",
                            TwoFactorEnabled = false,
                            UserName = "diego"
                        },
                        new
                        {
                            Id = "4b07b3da-c5d4-49da-852b-8c3ce8082390",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0e400a4-ef3d-4fb0-be3a-7ee31375de4b",
                            Email = "max@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAX@MAILINATOR.COM",
                            NormalizedUserName = "MAX",
                            PasswordHash = "AQAAAAEAACcQAAAAEESm26RdWKAhB54WXeQN5R5ATE1hJDQhoTsf+5QG+QkHEiqnt52NwoaBcYUEdK0EJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "315e1226-e90b-47d2-b2c7-180fd606c013",
                            TwoFactorEnabled = false,
                            UserName = "max"
                        },
                        new
                        {
                            Id = "b402dac2-bbfd-4ccb-bee0-174732561647",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "551dc9eb-737d-4ef4-80d3-682e50dfc8b3",
                            Email = "manuel@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANUEL@MAILINATOR.COM",
                            NormalizedUserName = "MANUEL",
                            PasswordHash = "AQAAAAEAACcQAAAAEN3qBvvPYSwt9uOQeHmmnu+j4t0+KHrzd305o7wtnr4d9TvJe0OIV6uzIYLjJHlnfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d17e2cf6-5237-465d-a666-eef22fcbb38b",
                            TwoFactorEnabled = false,
                            UserName = "manuel"
                        },
                        new
                        {
                            Id = "ebff4eed-5138-4ff8-bd7b-b47bca53a0e0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d218995-4860-45ef-bf31-d218b4097f87",
                            Email = "any@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANY@MAILINATOR.COM",
                            NormalizedUserName = "ANY",
                            PasswordHash = "AQAAAAEAACcQAAAAEMQI26nnbBhG41J+gOrJwtGfu8nbfB5KGKRPi2flPTpUAHzVcE2chIVV3AUSH4U1FA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "58137fa0-7489-437e-a191-2a4ec230201f",
                            TwoFactorEnabled = false,
                            UserName = "any"
                        },
                        new
                        {
                            Id = "0c5a8f1c-cdef-4b26-b4c9-d251127b7130",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5521f23d-3644-461d-a975-e652d0415ae2",
                            Email = "bel@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BEL@MAILINATOR.COM",
                            NormalizedUserName = "BEL",
                            PasswordHash = "AQAAAAEAACcQAAAAEJRCNP8TK8FqP9Env8KQ4xqoDFkgBqNaLkN76ioo/hliw9ZP9qMs0nRjPQtsNvNQWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0168ddf3-4258-4b7c-a67e-5c2bc20f95d6",
                            TwoFactorEnabled = false,
                            UserName = "bel"
                        },
                        new
                        {
                            Id = "3f4d842f-7629-4183-848d-27d394168e43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "afb200f1-abac-435f-8d27-b8f4d58974a6",
                            Email = "d@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "D@MAILINATOR.COM",
                            NormalizedUserName = "D",
                            PasswordHash = "AQAAAAEAACcQAAAAEOrLrFRz1x97WDjPQBIcnQdkTwyAZ6swcZRFGnzMyxkXr+agCJkCQSCZ88LipnYwnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e55192f5-71f9-43e4-b385-199edde8bf29",
                            TwoFactorEnabled = false,
                            UserName = "d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "5140f1d9-b80a-4fc4-87a6-86ecd759e191",
                            RoleId = "233efe61-93e9-4428-a60e-e8355c338e8b"
                        },
                        new
                        {
                            UserId = "00fb242a-8289-491c-bc80-dbebc94746fb",
                            RoleId = "233efe61-93e9-4428-a60e-e8355c338e8b"
                        },
                        new
                        {
                            UserId = "da726c41-2151-49bc-9b41-aa5a6ef32963",
                            RoleId = "233efe61-93e9-4428-a60e-e8355c338e8b"
                        },
                        new
                        {
                            UserId = "4b07b3da-c5d4-49da-852b-8c3ce8082390",
                            RoleId = "233efe61-93e9-4428-a60e-e8355c338e8b"
                        },
                        new
                        {
                            UserId = "b402dac2-bbfd-4ccb-bee0-174732561647",
                            RoleId = "233efe61-93e9-4428-a60e-e8355c338e8b"
                        },
                        new
                        {
                            UserId = "ebff4eed-5138-4ff8-bd7b-b47bca53a0e0",
                            RoleId = "233efe61-93e9-4428-a60e-e8355c338e8b"
                        },
                        new
                        {
                            UserId = "0c5a8f1c-cdef-4b26-b4c9-d251127b7130",
                            RoleId = "233efe61-93e9-4428-a60e-e8355c338e8b"
                        },
                        new
                        {
                            UserId = "3f4d842f-7629-4183-848d-27d394168e43",
                            RoleId = "233efe61-93e9-4428-a60e-e8355c338e8b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CohorteApi.Models.Event", b =>
                {
                    b.HasOne("CohorteApi.Models.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CohorteApi.Models.Review", b =>
                {
                    b.HasOne("CohorteApi.Models.Event", "Event")
                        .WithMany("Reviews")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CohorteApi.Models.Section", b =>
                {
                    b.HasOne("CohorteApi.Models.Event", null)
                        .WithMany("Sections")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CohorteApi.Models.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("CohorteApi.Models.Event", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Sections");
                });
#pragma warning restore 612, 618
        }
    }
}
